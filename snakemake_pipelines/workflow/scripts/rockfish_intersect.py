import polars as pl
import argparse, sys

def get_args():
    parser = argparse.ArgumentParser(description=(f"""This script can be used to convert the read position column to reference pisition
    by using the output generated by 'extract_ref_pos.py' script provided by rockfish.
                                                  
    recommendation: RAM >= 300gb is advised for larger genomes.                                                  
    """
),formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-i', '--input-readwise', type=str, help='Rockfish readwise data. (predictions.tsv)', required=True)
    parser.add_argument('-r', '--ref-map', type=str, help='rockfish reference map tsv file', required=True)
    parser.add_argument('-o', '--output', type=str, help='output file to save readwise data to', required=True)
    
    return parser.parse_args()

def parse_rockfish(rockfish, get_predicted=False, type_suffix=''):
    if get_predicted:
        value_col = pl.when(pl.col('prob') > 0.5).then(1).otherwise(0).alias(
            f'Rockfish{type_suffix}').cast(pl.UInt8)
    else:
        value_col = pl.col('prob').alias(f'prob{type_suffix}').cast(pl.Float32)

    rockfish = rockfish.select([
        pl.col('read_id'),
        pl.col('ctg').cast(pl.Categorical),
        pl.col('pos').cast(pl.UInt32), value_col
    ])

    return rockfish

if __name__=="__main__":
    args = get_args()
    pred_file, ref_map, out_file = args.input_readwise, args.ref_map, args.output

    d = pl.read_csv(pred_file, separator='\t').sort(['read_id', 'pos'])
    r = pl.read_csv(ref_map, separator='\t', has_header=False, new_columns=['read_id', 'pos', 'ref', 'ctg']).sort(['read_id', 'pos'])

    d = d.join(r, how='inner', on=['read_id', 'pos'])
    d = d.select(['read_id', 'ctg', 'ref', 'prob']).rename({'ref': 'pos'})
    d.write_csv(out_file, separator='\t', include_header=True)
